/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IComitiumInterface extends ethers.utils.Interface {
  functions: {
    "balanceAtTs(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegatedPower(address)": FunctionFragment;
    "delegatedPowerAtTs(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "fdtStaked()": FunctionFragment;
    "fdtStakedAtTs(uint256)": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "lockCreatorBalance(address,uint256)": FunctionFragment;
    "multiplierAtTs(address,uint256)": FunctionFragment;
    "stopDelegate()": FunctionFragment;
    "userDelegatedTo(address)": FunctionFragment;
    "userLockedUntil(address)": FunctionFragment;
    "votingPower(address)": FunctionFragment;
    "votingPowerAtTs(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceAtTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegatedPower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedPowerAtTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fdtStaked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fdtStakedAtTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lockCreatorBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierAtTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegatedTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLockedUntil",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "votingPower", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingPowerAtTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceAtTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatedPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedPowerAtTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fdtStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fdtStakedAtTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockCreatorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierAtTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegatedTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLockedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerAtTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IComitium extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IComitiumInterface;

  functions: {
    balanceAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delegate(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegatedPower(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegatedPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fdtStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    fdtStakedAtTs(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockCreatorBalance(
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplierAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stopDelegate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDelegatedTo(user: string, overrides?: CallOverrides): Promise<[string]>;

    userLockedUntil(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingPower(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceAtTs(
    user: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  delegate(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegatedPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  delegatedPowerAtTs(
    user: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fdtStaked(overrides?: CallOverrides): Promise<BigNumber>;

  fdtStakedAtTs(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockCreatorBalance(
    user: string,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplierAtTs(
    user: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stopDelegate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDelegatedTo(user: string, overrides?: CallOverrides): Promise<string>;

  userLockedUntil(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  votingPowerAtTs(
    user: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegate(to: string, overrides?: CallOverrides): Promise<void>;

    delegatedPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegatedPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fdtStaked(overrides?: CallOverrides): Promise<BigNumber>;

    fdtStakedAtTs(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(timestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lockCreatorBalance(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiplierAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stopDelegate(overrides?: CallOverrides): Promise<void>;

    userDelegatedTo(user: string, overrides?: CallOverrides): Promise<string>;

    userLockedUntil(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegatedPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegatedPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fdtStaked(overrides?: CallOverrides): Promise<BigNumber>;

    fdtStakedAtTs(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockCreatorBalance(
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplierAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stopDelegate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDelegatedTo(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLockedUntil(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPower(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegatedPower(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fdtStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fdtStakedAtTs(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockCreatorBalance(
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplierAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stopDelegate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDelegatedTo(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLockedUntil(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPower(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPowerAtTs(
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
