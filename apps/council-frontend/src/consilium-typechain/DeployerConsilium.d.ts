/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DeployerConsiliumInterface extends ethers.utils.Interface {
  functions: {
    "ANY_CALLER()": FunctionFragment;
    "ANY_SIG()": FunctionFragment;
    "allowCaller(bytes32,address)": FunctionFragment;
    "assertOwnership(address)": FunctionFragment;
    "baseQuorum()": FunctionFragment;
    "blockCaller(bytes32,address)": FunctionFragment;
    "blocklist()": FunctionFragment;
    "blocklistFactory()": FunctionFragment;
    "canCall(bytes32,address)": FunctionFragment;
    "comitium()": FunctionFragment;
    "comitiumVault()": FunctionFragment;
    "comitiumVaultFactory()": FunctionFragment;
    "coreVoting()": FunctionFragment;
    "coreVotingFactory()": FunctionFragment;
    "coreVotingGSC()": FunctionFragment;
    "deployBlocklist(address)": FunctionFragment;
    "deployComitiumVault()": FunctionFragment;
    "deployCoreVoting()": FunctionFragment;
    "deployGSCCoreVoting()": FunctionFragment;
    "deployGSCVault()": FunctionFragment;
    "deploySimpleProxy()": FunctionFragment;
    "deployTimelock()": FunctionFragment;
    "deployVestingVault(address,address)": FunctionFragment;
    "deployVotingEscrow(address,address)": FunctionFragment;
    "deployVotingEscrowVault(address)": FunctionFragment;
    "expiration()": FunctionFragment;
    "getVaults()": FunctionFragment;
    "getVaultsGSC()": FunctionFragment;
    "gscVault()": FunctionFragment;
    "gscVaultFactory()": FunctionFragment;
    "minProposalPower()": FunctionFragment;
    "setFactory(address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "setGSCandTimelock()": FunctionFragment;
    "simpleProxy()": FunctionFragment;
    "simpleProxyFactory()": FunctionFragment;
    "step()": FunctionFragment;
    "timelock()": FunctionFragment;
    "timelockFactory()": FunctionFragment;
    "transferTimelock()": FunctionFragment;
    "vestingVault()": FunctionFragment;
    "vestingVaultFactory()": FunctionFragment;
    "voteScale()": FunctionFragment;
    "votingEscrow()": FunctionFragment;
    "votingEscrowFactory()": FunctionFragment;
    "votingEscrowVault()": FunctionFragment;
    "votingEscrowVaultFactory()": FunctionFragment;
    "votingPowerBound()": FunctionFragment;
    "waitTime()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ANY_CALLER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ANY_SIG", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowCaller",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assertOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "baseQuorum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockCaller",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "blocklist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blocklistFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canCall",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "comitium", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comitiumVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comitiumVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreVotingFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coreVotingGSC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployBlocklist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployComitiumVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployCoreVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployGSCCoreVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployGSCVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploySimpleProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployVestingVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployVotingEscrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployVotingEscrowVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVaultsGSC",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gscVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gscVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minProposalPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGSCandTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simpleProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simpleProxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "step", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voteScale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrowFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrowVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrowVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerBound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "waitTime", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ANY_CALLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ANY_SIG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blocklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blocklistFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comitium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comitiumVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comitiumVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coreVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coreVotingFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coreVotingGSC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployBlocklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployComitiumVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployCoreVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGSCCoreVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGSCVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySimpleProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployVestingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployVotingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployVotingEscrowVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsGSC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gscVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gscVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minProposalPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGSCandTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleProxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrowFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrowVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrowVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "waitTime", data: BytesLike): Result;

  events: {
    "AllowCaller(bytes32,address)": EventFragment;
    "BlockCaller(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowCaller"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockCaller"): EventFragment;
}

export class DeployerConsilium extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DeployerConsiliumInterface;

  functions: {
    ANY_CALLER(overrides?: CallOverrides): Promise<[string]>;

    ANY_SIG(overrides?: CallOverrides): Promise<[string]>;

    allowCaller(
      sig: BytesLike,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assertOwnership(
      vestingManager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    baseQuorum(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockCaller(
      sig: BytesLike,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blocklist(overrides?: CallOverrides): Promise<[string]>;

    blocklistFactory(overrides?: CallOverrides): Promise<[string]>;

    canCall(
      sig: BytesLike,
      who: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    comitium(overrides?: CallOverrides): Promise<[string]>;

    comitiumVault(overrides?: CallOverrides): Promise<[string]>;

    comitiumVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    coreVoting(overrides?: CallOverrides): Promise<[string]>;

    coreVotingFactory(overrides?: CallOverrides): Promise<[string]>;

    coreVotingGSC(overrides?: CallOverrides): Promise<[string]>;

    deployBlocklist(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployComitiumVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployCoreVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployGSCCoreVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployGSCVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploySimpleProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployVestingVault(
      fdt: string,
      vestingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployVotingEscrow(
      _penaltyRecipient: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployVotingEscrowVault(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaults(overrides?: CallOverrides): Promise<[string[]]>;

    getVaultsGSC(overrides?: CallOverrides): Promise<[string[]]>;

    gscVault(overrides?: CallOverrides): Promise<[string]>;

    gscVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    minProposalPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    setFactory(
      coreVotingFactory_: string,
      timelockFactory_: string,
      gscVaultFactory_: string,
      blocklistFactory_: string,
      votingEscrowFactory_: string,
      votingEscrowVaultFactory_: string,
      comitiumVaultFactory_: string,
      vestingVaultFactory_: string,
      simpleProxyFactory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGSCandTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simpleProxy(overrides?: CallOverrides): Promise<[string]>;

    simpleProxyFactory(overrides?: CallOverrides): Promise<[string]>;

    step(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    timelockFactory(overrides?: CallOverrides): Promise<[string]>;

    transferTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingVault(overrides?: CallOverrides): Promise<[string]>;

    vestingVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    voteScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;

    votingEscrowFactory(overrides?: CallOverrides): Promise<[string]>;

    votingEscrowVault(overrides?: CallOverrides): Promise<[string]>;

    votingEscrowVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    votingPowerBound(overrides?: CallOverrides): Promise<[BigNumber]>;

    waitTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ANY_CALLER(overrides?: CallOverrides): Promise<string>;

  ANY_SIG(overrides?: CallOverrides): Promise<string>;

  allowCaller(
    sig: BytesLike,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assertOwnership(
    vestingManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  baseQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  blockCaller(
    sig: BytesLike,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blocklist(overrides?: CallOverrides): Promise<string>;

  blocklistFactory(overrides?: CallOverrides): Promise<string>;

  canCall(
    sig: BytesLike,
    who: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  comitium(overrides?: CallOverrides): Promise<string>;

  comitiumVault(overrides?: CallOverrides): Promise<string>;

  comitiumVaultFactory(overrides?: CallOverrides): Promise<string>;

  coreVoting(overrides?: CallOverrides): Promise<string>;

  coreVotingFactory(overrides?: CallOverrides): Promise<string>;

  coreVotingGSC(overrides?: CallOverrides): Promise<string>;

  deployBlocklist(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployComitiumVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployCoreVoting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployGSCCoreVoting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployGSCVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploySimpleProxy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployTimelock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployVestingVault(
    fdt: string,
    vestingManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployVotingEscrow(
    _penaltyRecipient: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployVotingEscrowVault(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expiration(overrides?: CallOverrides): Promise<BigNumber>;

  getVaults(overrides?: CallOverrides): Promise<string[]>;

  getVaultsGSC(overrides?: CallOverrides): Promise<string[]>;

  gscVault(overrides?: CallOverrides): Promise<string>;

  gscVaultFactory(overrides?: CallOverrides): Promise<string>;

  minProposalPower(overrides?: CallOverrides): Promise<BigNumber>;

  setFactory(
    coreVotingFactory_: string,
    timelockFactory_: string,
    gscVaultFactory_: string,
    blocklistFactory_: string,
    votingEscrowFactory_: string,
    votingEscrowVaultFactory_: string,
    comitiumVaultFactory_: string,
    vestingVaultFactory_: string,
    simpleProxyFactory_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGSCandTimelock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simpleProxy(overrides?: CallOverrides): Promise<string>;

  simpleProxyFactory(overrides?: CallOverrides): Promise<string>;

  step(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  timelockFactory(overrides?: CallOverrides): Promise<string>;

  transferTimelock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingVault(overrides?: CallOverrides): Promise<string>;

  vestingVaultFactory(overrides?: CallOverrides): Promise<string>;

  voteScale(overrides?: CallOverrides): Promise<BigNumber>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  votingEscrowFactory(overrides?: CallOverrides): Promise<string>;

  votingEscrowVault(overrides?: CallOverrides): Promise<string>;

  votingEscrowVaultFactory(overrides?: CallOverrides): Promise<string>;

  votingPowerBound(overrides?: CallOverrides): Promise<BigNumber>;

  waitTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ANY_CALLER(overrides?: CallOverrides): Promise<string>;

    ANY_SIG(overrides?: CallOverrides): Promise<string>;

    allowCaller(
      sig: BytesLike,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assertOwnership(
      vestingManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    blockCaller(
      sig: BytesLike,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blocklist(overrides?: CallOverrides): Promise<string>;

    blocklistFactory(overrides?: CallOverrides): Promise<string>;

    canCall(
      sig: BytesLike,
      who: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    comitium(overrides?: CallOverrides): Promise<string>;

    comitiumVault(overrides?: CallOverrides): Promise<string>;

    comitiumVaultFactory(overrides?: CallOverrides): Promise<string>;

    coreVoting(overrides?: CallOverrides): Promise<string>;

    coreVotingFactory(overrides?: CallOverrides): Promise<string>;

    coreVotingGSC(overrides?: CallOverrides): Promise<string>;

    deployBlocklist(_manager: string, overrides?: CallOverrides): Promise<void>;

    deployComitiumVault(overrides?: CallOverrides): Promise<void>;

    deployCoreVoting(overrides?: CallOverrides): Promise<void>;

    deployGSCCoreVoting(overrides?: CallOverrides): Promise<void>;

    deployGSCVault(overrides?: CallOverrides): Promise<void>;

    deploySimpleProxy(overrides?: CallOverrides): Promise<void>;

    deployTimelock(overrides?: CallOverrides): Promise<void>;

    deployVestingVault(
      fdt: string,
      vestingManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployVotingEscrow(
      _penaltyRecipient: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployVotingEscrowVault(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    getVaults(overrides?: CallOverrides): Promise<string[]>;

    getVaultsGSC(overrides?: CallOverrides): Promise<string[]>;

    gscVault(overrides?: CallOverrides): Promise<string>;

    gscVaultFactory(overrides?: CallOverrides): Promise<string>;

    minProposalPower(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      coreVotingFactory_: string,
      timelockFactory_: string,
      gscVaultFactory_: string,
      blocklistFactory_: string,
      votingEscrowFactory_: string,
      votingEscrowVaultFactory_: string,
      comitiumVaultFactory_: string,
      vestingVaultFactory_: string,
      simpleProxyFactory_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGSCandTimelock(overrides?: CallOverrides): Promise<void>;

    simpleProxy(overrides?: CallOverrides): Promise<string>;

    simpleProxyFactory(overrides?: CallOverrides): Promise<string>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    timelockFactory(overrides?: CallOverrides): Promise<string>;

    transferTimelock(overrides?: CallOverrides): Promise<void>;

    vestingVault(overrides?: CallOverrides): Promise<string>;

    vestingVaultFactory(overrides?: CallOverrides): Promise<string>;

    voteScale(overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;

    votingEscrowFactory(overrides?: CallOverrides): Promise<string>;

    votingEscrowVault(overrides?: CallOverrides): Promise<string>;

    votingEscrowVaultFactory(overrides?: CallOverrides): Promise<string>;

    votingPowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    waitTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AllowCaller(
      sig?: null,
      who?: null
    ): TypedEventFilter<[string, string], { sig: string; who: string }>;

    BlockCaller(
      sig?: null,
      who?: null
    ): TypedEventFilter<[string, string], { sig: string; who: string }>;
  };

  estimateGas: {
    ANY_CALLER(overrides?: CallOverrides): Promise<BigNumber>;

    ANY_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    allowCaller(
      sig: BytesLike,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assertOwnership(
      vestingManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    blockCaller(
      sig: BytesLike,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blocklist(overrides?: CallOverrides): Promise<BigNumber>;

    blocklistFactory(overrides?: CallOverrides): Promise<BigNumber>;

    canCall(
      sig: BytesLike,
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comitium(overrides?: CallOverrides): Promise<BigNumber>;

    comitiumVault(overrides?: CallOverrides): Promise<BigNumber>;

    comitiumVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    coreVoting(overrides?: CallOverrides): Promise<BigNumber>;

    coreVotingFactory(overrides?: CallOverrides): Promise<BigNumber>;

    coreVotingGSC(overrides?: CallOverrides): Promise<BigNumber>;

    deployBlocklist(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployComitiumVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployCoreVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployGSCCoreVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployGSCVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploySimpleProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployVestingVault(
      fdt: string,
      vestingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployVotingEscrow(
      _penaltyRecipient: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployVotingEscrowVault(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expiration(overrides?: CallOverrides): Promise<BigNumber>;

    getVaults(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsGSC(overrides?: CallOverrides): Promise<BigNumber>;

    gscVault(overrides?: CallOverrides): Promise<BigNumber>;

    gscVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    minProposalPower(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      coreVotingFactory_: string,
      timelockFactory_: string,
      gscVaultFactory_: string,
      blocklistFactory_: string,
      votingEscrowFactory_: string,
      votingEscrowVaultFactory_: string,
      comitiumVaultFactory_: string,
      vestingVaultFactory_: string,
      simpleProxyFactory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGSCandTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simpleProxy(overrides?: CallOverrides): Promise<BigNumber>;

    simpleProxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    timelockFactory(overrides?: CallOverrides): Promise<BigNumber>;

    transferTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingVault(overrides?: CallOverrides): Promise<BigNumber>;

    vestingVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    voteScale(overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrowFactory(overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrowVault(overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrowVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    votingPowerBound(overrides?: CallOverrides): Promise<BigNumber>;

    waitTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ANY_CALLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ANY_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowCaller(
      sig: BytesLike,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assertOwnership(
      vestingManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockCaller(
      sig: BytesLike,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blocklist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blocklistFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canCall(
      sig: BytesLike,
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comitium(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comitiumVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comitiumVaultFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coreVoting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coreVotingFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coreVotingGSC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployBlocklist(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployComitiumVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployCoreVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployGSCCoreVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployGSCVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploySimpleProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployVestingVault(
      fdt: string,
      vestingManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployVotingEscrow(
      _penaltyRecipient: string,
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployVotingEscrowVault(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expiration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultsGSC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gscVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gscVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProposalPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFactory(
      coreVotingFactory_: string,
      timelockFactory_: string,
      gscVaultFactory_: string,
      blocklistFactory_: string,
      votingEscrowFactory_: string,
      votingEscrowVaultFactory_: string,
      comitiumVaultFactory_: string,
      vestingVaultFactory_: string,
      simpleProxyFactory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGSCandTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simpleProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    simpleProxyFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferTimelock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingVaultFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEscrowFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEscrowVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEscrowVaultFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPowerBound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
