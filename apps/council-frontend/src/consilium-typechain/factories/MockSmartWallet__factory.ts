/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockSmartWallet,
  MockSmartWalletInterface,
} from "../MockSmartWallet";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_fdt",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ve",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "createLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fdt",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ve",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ve",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "unlockTime",
        type: "uint256",
      },
    ],
    name: "increaseUnlockTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ve",
        type: "address",
      },
    ],
    name: "quitLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ve",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161061638038061061683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610585806100916000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638f3e37a1116100505780638f3e37a1146100e8578063bdf99da3146100fb578063cb5f06cd1461010e57600080fd5b806322d392cb1461007757806351cff8d9146100c0578063650e1505146100d5575b600080fd5b6000546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d36100ce3660046104b3565b610121565b005b6100d36100e33660046104fd565b610184565b6100d36100f63660046104d4565b6102bd565b6100d36101093660046104b3565b6103ef565b6100d361011c3660046104d4565b610437565b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016957600080fd5b505af115801561017d573d6000803e3d6000fd5b5050505050565b6000546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063095ea7b390604401602060405180830381600087803b1580156101f857600080fd5b505af115801561020c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610230919061052f565b506040517fb52c05fe000000000000000000000000000000000000000000000000000000008152600481018390526024810182905273ffffffffffffffffffffffffffffffffffffffff84169063b52c05fe90604401600060405180830381600087803b1580156102a057600080fd5b505af11580156102b4573d6000803e3d6000fd5b50505050505050565b6000546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610369919061052f565b506040517f15456eba0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8316906315456eba906024015b600060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b505050505050565b8073ffffffffffffffffffffffffffffffffffffffff166375c54eda6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016957600080fd5b6040517f7c616fe60000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff831690637c616fe6906024016103b9565b803573ffffffffffffffffffffffffffffffffffffffff811681146104ae57600080fd5b919050565b6000602082840312156104c4578081fd5b6104cd8261048a565b9392505050565b600080604083850312156104e6578081fd5b6104ef8361048a565b946020939093013593505050565b600080600060608486031215610511578081fd5b61051a8461048a565b95602085013595506040909401359392505050565b600060208284031215610540578081fd5b815180151581146104cd578182fdfea26469706673582212206c247e6c128164accc7f3e30b93a612f2caa73bb8d1bec1c1a306ebb3d7b639d64736f6c63430008040033";

export class MockSmartWallet__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _fdt: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockSmartWallet> {
    return super.deploy(_fdt, overrides || {}) as Promise<MockSmartWallet>;
  }
  getDeployTransaction(
    _fdt: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_fdt, overrides || {});
  }
  attach(address: string): MockSmartWallet {
    return super.attach(address) as MockSmartWallet;
  }
  connect(signer: Signer): MockSmartWallet__factory {
    return super.connect(signer) as MockSmartWallet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSmartWalletInterface {
    return new utils.Interface(_abi) as MockSmartWalletInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): MockSmartWallet {
    return new Contract(address, _abi, signerOrProvider) as MockSmartWallet;
  }
}
