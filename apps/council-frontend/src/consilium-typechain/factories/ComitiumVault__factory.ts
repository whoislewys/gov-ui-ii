/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ComitiumVault, ComitiumVaultInterface } from "../ComitiumVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IComitium",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_expiration",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "_voteScale",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "SCALE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "comitium",
    outputs: [
      {
        internalType: "contract IComitium",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "expiration",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "queryVotePower",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "queryVotePowerView",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "voteScale",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161067b38038061067b83398101604081905261002f9161005a565b60609290921b6001600160601b03191660809081521b6001600160801b03191660a05260c0526100b2565b60008060006060848603121561006e578283fd5b83516001600160a01b0381168114610084578384fd5b60208501519093506001600160801b03811681146100a0578283fd5b80925050604084015190509250925092565b60805160601c60a05160801c60c0516105736101086000396000818160c9015261037a015260008181607c0152818161017e01526102a00152600081816101330152818161020e015261033001526105736000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063e7d2028311610050578063e7d202831461010c578063eced55261461011f578063f1a4af101461012e57600080fd5b80634665096d1461007757806355e3ce51146100c4578063d994844a146100f9575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100eb7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100bb565b6100eb6101073660046103fb565b61017a565b6100eb61011a3660046103d2565b61029c565b6100eb670de0b6b3a764000081565b6101557f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100bb565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff164211156101be57506000610293565b6040517fcbf8eda900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201869052610290917f00000000000000000000000000000000000000000000000000000000000000009091169063cbf8eda9906044015b60206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b919061048a565b61036a565b90505b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006fffffffffffffffffffffffffffffffff164211156102e057506000610364565b6040517fcbf8eda900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052610361917f00000000000000000000000000000000000000000000000000000000000000009091169063cbf8eda99060440161023b565b90505b92915050565b6000670de0b6b3a764000061039f7f0000000000000000000000000000000000000000000000000000000000000000846104db565b61036491906104a2565b803573ffffffffffffffffffffffffffffffffffffffff811681146103cd57600080fd5b919050565b600080604083850312156103e4578182fd5b6103ed836103a9565b946020939093013593505050565b600080600080600060808688031215610412578081fd5b61041b866103a9565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610445578283fd5b818801915088601f830112610458578283fd5b813581811115610466578384fd5b896020828501011115610477578384fd5b9699959850939650602001949392505050565b60006020828403121561049b578081fd5b5051919050565b6000826104d6577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610538577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea26469706673582212205cf271d3afcfe748805816529f5e12d12eddb9a41681758c90704130a402922464736f6c63430008040033";

export class ComitiumVault__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _address: string,
    _expiration: BigNumberish,
    _voteScale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ComitiumVault> {
    return super.deploy(
      _address,
      _expiration,
      _voteScale,
      overrides || {}
    ) as Promise<ComitiumVault>;
  }
  getDeployTransaction(
    _address: string,
    _expiration: BigNumberish,
    _voteScale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _address,
      _expiration,
      _voteScale,
      overrides || {}
    );
  }
  attach(address: string): ComitiumVault {
    return super.attach(address) as ComitiumVault;
  }
  connect(signer: Signer): ComitiumVault__factory {
    return super.connect(signer) as ComitiumVault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ComitiumVaultInterface {
    return new utils.Interface(_abi) as ComitiumVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ComitiumVault {
    return new Contract(address, _abi, signerOrProvider) as ComitiumVault;
  }
}
